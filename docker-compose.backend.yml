version: "3.8"

services:
  nextest-backend:
    image: node:18-alpine
    working_dir: /tmp/app
    command: |
      sh -c "
        apk add --no-cache git python3 make g++ &&
        git clone https://github.com/murillobc/tutoriais-nxt.git . &&
        npm ci &&
        rm -f vite.config.ts &&
        
        # ðŸš¨ Ã‚NCORA: DOCKER - Mock vite.ts para produÃ§Ã£o
        # Contexto: O server/index.ts importa vite.ts mas em produÃ§Ã£o sÃ³ precisamos das funÃ§Ãµes log e serveStatic
        # Cuidado: Manter as funÃ§Ãµes com mesma assinatura para compatibilidade
        # DependÃªncias: server/index.ts depende dessas funÃ§Ãµes
        cat > server/vite.ts << 'EOF'
import express, { type Express } from \"express\";
import fs from \"fs\";
import path from \"path\";

export function log(message: string, source = \"express\") {
  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {
    hour: \"numeric\",
    minute: \"2-digit\",
    second: \"2-digit\",
    hour12: true,
  });
  console.log(\`\${formattedTime} [\${source}] \${message}\`);
}

export async function setupVite(app: Express, server: any) {
  // Em produÃ§Ã£o, setupVite nÃ£o faz nada
  log(\"Vite setup skipped in production\", \"docker\");
}

export function serveStatic(app: Express) {
  const distPath = path.resolve(import.meta.dirname, \"public\");

  if (!fs.existsSync(distPath)) {
    throw new Error(
      \`Could not find the build directory: \${distPath}, make sure to build the client first\`,
    );
  }

  app.use(express.static(distPath));

  // fall through to index.html if the file doesn't exist
  app.use(\"*\", (_req, res) => {
    res.sendFile(path.resolve(distPath, \"index.html\"));
  });
}
EOF

        npx esbuild server/index.ts --platform=node --bundle --format=esm --outdir=dist &&
        echo 'ðŸš€ Build concluÃ­do (com vite.ts mock), iniciando servidor...' &&
        node dist/index.js
      "
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:cQM6q7g505tP@postgres_tuto_nxt_postgres:5432/postgres
      - SESSION_SECRET=${SESSION_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      - WEBHOOK_URL=${WEBHOOK_URL}
    restart: always
    networks:
      - network_public
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.nextest-api.rule=Host(`api.automai.com.br`)
        - traefik.http.routers.nextest-api.entrypoints=websecure
        - traefik.http.routers.nextest-api.tls.certresolver=letsencryptresolver
        - traefik.http.services.nextest-api.loadbalancer.server.port=3000

networks:
  network_public:
    external: true
    name: network_public
